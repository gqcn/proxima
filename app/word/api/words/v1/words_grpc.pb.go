// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: words/v1/words.proto

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WordsClient is the client API for Words service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WordsClient interface {
	Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateRes, error)
	Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetRes, error)
}

type wordsClient struct {
	cc grpc.ClientConnInterface
}

func NewWordsClient(cc grpc.ClientConnInterface) WordsClient {
	return &wordsClient{cc}
}

func (c *wordsClient) Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateRes, error) {
	out := new(CreateRes)
	err := c.cc.Invoke(ctx, "/words.v1.Words/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordsClient) Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetRes, error) {
	out := new(GetRes)
	err := c.cc.Invoke(ctx, "/words.v1.Words/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WordsServer is the server API for Words service.
// All implementations must embed UnimplementedWordsServer
// for forward compatibility
type WordsServer interface {
	Create(context.Context, *CreateReq) (*CreateRes, error)
	Get(context.Context, *GetReq) (*GetRes, error)
	mustEmbedUnimplementedWordsServer()
}

// UnimplementedWordsServer must be embedded to have forward compatible implementations.
type UnimplementedWordsServer struct {
}

func (UnimplementedWordsServer) Create(context.Context, *CreateReq) (*CreateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedWordsServer) Get(context.Context, *GetReq) (*GetRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedWordsServer) mustEmbedUnimplementedWordsServer() {}

// UnsafeWordsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WordsServer will
// result in compilation errors.
type UnsafeWordsServer interface {
	mustEmbedUnimplementedWordsServer()
}

func RegisterWordsServer(s grpc.ServiceRegistrar, srv WordsServer) {
	s.RegisterService(&Words_ServiceDesc, srv)
}

func _Words_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/words.v1.Words/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordsServer).Create(ctx, req.(*CreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Words_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/words.v1.Words/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordsServer).Get(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Words_ServiceDesc is the grpc.ServiceDesc for Words service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Words_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "words.v1.Words",
	HandlerType: (*WordsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Words_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Words_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "words/v1/words.proto",
}
